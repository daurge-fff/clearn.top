const mongoose = require('mongoose');
const CourseManager = require('../utils/courseManager');
require('dotenv').config();

const Course = require('../models/Course');

class CourseSync {
    constructor() {
        this.courseManager = new CourseManager();
    }

    async connectToDatabase() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (mongoose.connection.readyState === 1) {
                console.log('‚úÖ Using existing MongoDB connection');
                return true;
            }
            
            await mongoose.connect(process.env.MONGO_URI, {
                serverSelectionTimeoutMS: 30000,
                socketTimeoutMS: 45000,
                connectTimeoutMS: 30000,
                maxPoolSize: 10,
                minPoolSize: 5,
                maxIdleTimeMS: 30000,
                bufferCommands: false
            });
            console.log('‚úÖ Connected to MongoDB');
            return true;
        } catch (error) {
            console.error('‚ùå MongoDB Connection Error:', error.message);
            return false;
        }
    }

    async syncCourses() {
        console.log('üîÑ Starting course synchronization...');
        
        const coursesFromConfig = this.courseManager.getAllCoursesForDatabase();
        console.log(`üìö Found ${coursesFromConfig.length} courses in configuration`);

        for (const courseData of coursesFromConfig) {
            const { key, ...courseInfo } = courseData;
            
            try {
                // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—É—Ä—Å –ø–æ –∏–º–µ–Ω–∏
                let existingCourse = await Course.findOne({ name: courseInfo.name });
                
                if (existingCourse) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—É—Ä—Å
                    existingCourse.description = courseInfo.description;
                    existingCourse.ageGroup = courseInfo.ageGroup;
                    existingCourse.tools = courseInfo.tools;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                    if (!existingCourse.visible) existingCourse.visible = courseInfo.visible;
                    if (!existingCourse.order) existingCourse.order = courseInfo.order;
                    if (!existingCourse.key) existingCourse.key = key;
                    
                    await existingCourse.save();
                    console.log(`‚úÖ Updated course: ${courseInfo.name}`);
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
                    const newCourse = new Course({
                        ...courseInfo,
                        key: key
                    });
                    await newCourse.save();
                    console.log(`‚ûï Added new course: ${courseInfo.name}`);
                }
            } catch (error) {
                console.error(`‚ùå Error processing course ${courseInfo.name}:`, error.message);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const allDbCourses = await Course.find();
        const configKeys = coursesFromConfig.map(c => c.key);
        
        for (const dbCourse of allDbCourses) {
            if (dbCourse.key && !configKeys.includes(dbCourse.key)) {
                console.log(`‚ö†Ô∏è  Course ${dbCourse.name} (${dbCourse.key}) exists in database but not in configuration`);
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Å–∫—Ä—ã—Ç–∏—è —Ç–∞–∫–∏—Ö –∫—É—Ä—Å–æ–≤
            }
        }

        console.log('‚úÖ Course synchronization completed');
    }

    async getDatabaseStatus() {
        try {
            const courses = await Course.find().sort({ order: 1 });
            console.log('\nüìä Database Status:');
            console.log('==================');
            
            if (courses.length === 0) {
                console.log('No courses found in database');
                return;
            }

            courses.forEach(course => {
                const status = course.visible ? '‚úÖ' : '‚ùå';
                console.log(`${status} ${course.name} (${course.key || 'no-key'}) - Order: ${course.order || 'N/A'}`);
            });
        } catch (error) {
            console.error('‚ùå Error getting database status:', error.message);
        }
    }

    async disconnect() {
        try {
            await mongoose.disconnect();
            console.log('üîå Disconnected from MongoDB');
        } catch (error) {
            console.error('‚ùå Error disconnecting:', error.message);
        }
    }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const sync = new CourseSync();
    
    async function run() {
        const connected = await sync.connectToDatabase();
        if (!connected) {
            console.log('‚ùå Cannot connect to database. Exiting...');
            process.exit(1);
        }

        try {
            await sync.syncCourses();
            await sync.getDatabaseStatus();
        } catch (error) {
            console.error('‚ùå Sync failed:', error);
        } finally {
            await sync.disconnect();
        }
    }

    run();
}

module.exports = CourseSync;
