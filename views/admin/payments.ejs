<div class="container">
    <div class="page-header">
        <h1>Payment Management</h1>
        <div class="page-actions">
            <a href="/api/payments/export?<%= new URLSearchParams(query).toString() %>" class="btn btn-secondary"><i class="icon-export"></i> Export to CSV</a>
        </div>
    </div>
    <div class="card filter-card">
        <form action="/dashboard/payments" method="GET" class="filter-form">
            <div class="filter-group main-search">
                <label for="search-input">Search</label>
                <div class="input-with-icon">
                    <i class="icon-search"></i>
                    <input type="text" id="search-input" name="search" placeholder="By user, identifier, amount..." value="<%= query.search || '' %>">
                </div>
            </div>

            <button type="button" id="mobile-filter-toggle" class="btn btn-secondary mobile-only">
                <i class="icon-filter"></i>
                <span>Filters</span>
            </button>
            
            <div class="collapsible-filters">
                <div class="filter-group">
                    <label for="status">Status</label>
                    <select name="status" id="status">
                        <option value="">All Statuses</option>
                        <option value="completed" <%= (query.status === 'completed') ? 'selected' : '' %>>Completed</option>
                        <option value="manual_review" <%= (query.status === 'manual_review') ? 'selected' : '' %>>Manual Review</option>
                        <option value="pending" <%= (query.status === 'pending') ? 'selected' : '' %>>Pending</option>
                        <option value="failed" <%= (query.status === 'failed') ? 'selected' : '' %>>Failed</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="user">User</label>
                    <select name="user" id="user">
                        <option value="">All Users</option>
                        <% if (typeof allUsers !== 'undefined' && allUsers) { %>
                            <% allUsers.forEach(u => { %>
                                <option value="<%= u._id %>" <%= (query.user == u._id) ? 'selected' : '' %>><%= u.name %></option>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="period">Period</label>
                    <select name="period" id="period">
                        <option value="" <%= (!query.period) ? 'selected' : '' %>>All Time</option>
                        <option value="today" <%= (query.period === 'today') ? 'selected' : '' %>>Today</option>
                        <option value="week" <%= (query.period === 'week') ? 'selected' : '' %>>This Week</option>
                        <option value="month" <%= (query.period === 'month') ? 'selected' : '' %>>This Month</option>
                        <option value="quarter" <%= (query.period === 'quarter') ? 'selected' : '' %>>This Quarter</option>
                        <option value="year" <%= (query.period === 'year') ? 'selected' : '' %>>This Year</option>
                        <option value="custom" <%= (query.period === 'custom') ? 'selected' : '' %>>Custom Range</option>
                    </select>
                </div>
                <div class="filter-group custom-date-range" style="<%= (query.period !== 'custom') ? 'display: none;' : '' %>">
                    <label for="dateFrom">From</label>
                    <div class="input-with-icon">
                        <i class="icon-calendar"></i>
                        <input type="date" name="dateFrom" id="dateFrom" value="<%= query.dateFrom || '' %>">
                    </div>
                </div>
                <div class="filter-group custom-date-range" style="<%= (query.period !== 'custom') ? 'display: none;' : '' %>">
                    <label for="dateTo">To</label>
                    <div class="input-with-icon">
                        <i class="icon-calendar"></i>
                        <input type="date" name="dateTo" id="dateTo" value="<%= query.dateTo || '' %>">
                    </div>
                </div>
                <div class="filter-group">
                    <label>Amount Range</label>
                    <div class="amount-range">
                        <input type="number" name="amountMin" id="amountMin" placeholder="Min" step="0.01" value="<%= query.amountMin || '' %>">
                        <input type="number" name="amountMax" id="amountMax" placeholder="Max" step="0.01" value="<%= query.amountMax || '' %>">
                    </div>
                </div>
                <div class="filter-actions">
                    <button type="submit" class="btn btn-primary">Apply</button>
                    <a href="/dashboard/payments" class="btn btn-secondary">Clear</a>
                </div>
            </div>
        </form>
    </div>

    <div class="card">
        <div class="table-responsive">
            <table class="data-table">
                <thead>
                    <%
                        const sortableLink = (field, text) => {
                            const isCurrentSort = query.sort === field;
                            const order = isCurrentSort && query.order === 'asc' ? 'desc' : 'asc';
                            const icon = isCurrentSort ? (query.order === 'asc' ? '↑' : '↓') : '';
                            const params = new URLSearchParams(query);
                            params.set('sort', field);
                            params.set('order', order);
                            return `<a href="?${params.toString()}">${text} ${icon}</a>`;
                        };
                    %>
                    <tr>
                        <th><%- sortableLink('createdAt', 'Date') %></th>
                        <th><%- sortableLink('pendingIdentifier', 'Client ID') %></th>
                        <th><%- sortableLink('userId.name', 'User') %></th>
                        <th><%- sortableLink('amountPaid', 'Amount') %></th>
                        <th><%- sortableLink('status', 'Status') %></th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (payments && payments.length > 0) { %>
                        <% payments.forEach(payment => { %>
                            <tr data-payment-id="<%= payment._id %>">
                                <td><%= new Date(payment.createdAt).toLocaleString('en-US', { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' }) %></td>
                                <td><code><%= payment.pendingIdentifier %></code></td>
                                <td>
                                    <% if (payment.userId) { %>
                                        <a href="/dashboard/user-profile/<%= payment.userId._id %>" class="link-discreet"><%= payment.userId.name %></a>
                                    <% } else { %>
                                        <button class="btn btn-secondary link-payment-btn" data-payment-id="<%= payment._id %>" data-identifier="<%= payment.pendingIdentifier %>">
                                            Link User
                                        </button>
                                    <% } %>
                                </td>
                                <td><strong>€<%= payment.amountPaid.toFixed(2) %></strong></td>
                                
                                <td class="status-cell" onclick="openPaymentStatusModal('<%= payment._id %>', '<%= payment.status %>')">
                                    <span class="badge payment-<%= payment.status %>">
                                        <%= payment.status === 'pending' ? 'Pending' : payment.status === 'completed' ? 'Completed' : payment.status === 'failed' ? 'Failed' : 'Refunded' %>
                                    </span>
                                </td>

                                <td class="actions-cell">
                                    <button class="btn-icon" onclick="openPaymentEditModal('<%= payment._id %>', '<%= payment.amountPaid %>', '<%= payment.currency %>', '<%= payment.lessonsPurchased %>', '<%= payment.paymentSystem %>', '<%= payment.transactionType %>', '<%= payment.status %>', '<%= payment.pendingIdentifier %>', '<%= payment.notes || '' %>')" data-tooltip="Edit Payment"><i class="icon-edit"></i></button>
                                    <form action="/dashboard/payments/<%= payment._id %>?_method=DELETE" method="POST" style="display: inline;">
                                        <button type="submit" class="btn btn-sm btn-outline-danger btn-icon" onclick="return confirm('Are you sure you want to delete this payment?')" title="Delete">
                                            <i class="icon-trash"></i>
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="5">
                                <div class="empty-state">
                                    <h3>No Payments Found</h3>
                                    <p>No payments match your current filters.</p>
                                </div>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const periodSelect = document.getElementById('period');
    const customDateRanges = document.querySelectorAll('.custom-date-range');
    const mobileFilterToggle = document.getElementById('mobile-filter-toggle');
    const collapsibleFilters = document.querySelector('.collapsible-filters');
    
    // Toggle custom date range visibility
    function toggleCustomDateRange() {
        const isCustom = periodSelect.value === 'custom';
        customDateRanges.forEach(range => {
            range.style.display = isCustom ? 'block' : 'none';
        });
    }
    
    periodSelect.addEventListener('change', toggleCustomDateRange);
    
    // Mobile filter toggle
    if (mobileFilterToggle && collapsibleFilters) {
        mobileFilterToggle.addEventListener('click', function() {
            collapsibleFilters.classList.toggle('show');
        });
    }
    
    // Auto-submit on quick period selection
    periodSelect.addEventListener('change', function() {
        if (this.value !== 'custom' && this.value !== '') {
            // Auto-submit for predefined periods
            setTimeout(() => {
                this.closest('form').submit();
            }, 100);
        }
    });
});

// Payment Status Modal Functions
let currentPaymentId = null;

let isPaymentModalOpen = false;

function openPaymentStatusModal(paymentId, currentStatus) {
    if (isPaymentModalOpen) return;
    
    currentPaymentId = paymentId;
    const statusSelect = document.getElementById('paymentStatusSelect');
    if (statusSelect) {
        statusSelect.value = currentStatus;
    }
    
    const modal = document.getElementById('paymentStatusModal');
    if (!modal) {
        console.error('Payment modal not found');
        return;
    }
    
    // Show modal with new CSS classes
    modal.classList.add('show');
    isPaymentModalOpen = true;
    
    // Close on backdrop click
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closePaymentStatusModal();
        }
    });
}

function closePaymentStatusModal() {
    if (!isPaymentModalOpen) return;
    
    const modal = document.getElementById('paymentStatusModal');
    if (modal) {
        modal.classList.remove('show');
    }
    
    isPaymentModalOpen = false;
    currentPaymentId = null;
}

function updatePaymentStatus() {
    if (!currentPaymentId) {
        alert('No payment selected');
        return;
    }
    
    const statusSelect = document.getElementById('paymentStatusSelect');
    if (!statusSelect) {
        alert('Status select not found');
        return;
    }
    
    const newStatus = statusSelect.value;
    if (!newStatus) {
        alert('Please select a status');
        return;
    }
    
    // Show loading state
    const updateBtn = document.querySelector('#paymentStatusModal .btn-primary');
    const originalText = updateBtn.textContent;
    updateBtn.textContent = 'Updating...';
    updateBtn.disabled = true;
    
    fetch(`/dashboard/payments/${currentPaymentId}/status`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            closePaymentStatusModal();
            location.reload();
        } else {
            throw new Error(data.message || 'Unknown error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error updating status: ' + error.message);
    })
    .finally(() => {
        updateBtn.textContent = originalText;
        updateBtn.disabled = false;
    });
}

// Close modal with Escape key
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && isPaymentModalOpen) {
        closePaymentStatusModal();
    }
});

// Ensure modal is hidden on page load
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('paymentStatusModal');
    if (modal) {
        modal.classList.remove('show');
    }
});

// Payment Edit Modal Functions
function openPaymentEditModal(paymentId, amountPaid, currency, lessonsPurchased, paymentSystem, transactionType, status, pendingIdentifier, description) {
    document.getElementById('paymentEditId').value = paymentId;
    document.getElementById('paymentEditAmount').value = amountPaid;
    document.getElementById('paymentEditCurrency').value = currency;
    document.getElementById('paymentEditLessons').value = lessonsPurchased;
    document.getElementById('paymentEditSystem').value = paymentSystem || 'Manual';
    document.getElementById('paymentEditTariff').value = transactionType || '50min';
    document.getElementById('paymentEditStatus').value = status || 'completed';
    document.getElementById('paymentEditIdentifier').value = pendingIdentifier || '';
    document.getElementById('paymentEditDescription').value = description || '';
    
    const modal = document.getElementById('paymentEditModal');
    modal.style.display = 'block';
    setTimeout(() => modal.classList.add('show'), 10);
}

function closePaymentEditModal() {
    const modal = document.getElementById('paymentEditModal');
    modal.classList.remove('show');
    setTimeout(() => modal.style.display = 'none', 300);
}

// Handle payment edit form submission
document.getElementById('paymentEditForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const paymentId = formData.get('paymentId');
    const amountPaid = formData.get('amountPaid');
    const currency = formData.get('currency');
    const lessonsPurchased = formData.get('lessonsPurchased');
    const paymentSystem = formData.get('paymentSystem');
    const transactionType = formData.get('transactionType');
    const status = formData.get('status');
    const pendingIdentifier = formData.get('pendingIdentifier');
    const description = formData.get('description');
    
    const saveBtn = document.getElementById('savePaymentBtn');
    saveBtn.disabled = true;
    saveBtn.textContent = 'Saving...';
    
    try {
        const response = await fetch(`/dashboard/payments/${paymentId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                amountPaid: parseFloat(amountPaid),
                currency: currency,
                lessonsPurchased: parseInt(lessonsPurchased),
                paymentSystem: paymentSystem,
                transactionType: transactionType,
                status: status,
                pendingIdentifier: pendingIdentifier,
                description: description
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                closePaymentEditModal();
                location.reload(); // Reload to show updated data
            } else {
                alert('Error: ' + result.message);
            }
        } else {
            throw new Error('Failed to update payment');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error updating payment. Please try again.');
    } finally {
        saveBtn.disabled = false;
        saveBtn.textContent = 'Save Changes';
    }
});

// Close payment edit modal when clicking outside
document.getElementById('paymentEditModal').addEventListener('click', function(e) {
    if (e.target === this) {
        closePaymentEditModal();
    }
});
</script>

<!-- Новое модальное окно статуса платежа -->
<div class="status-modal" id="paymentStatusModal">
    <div class="status-modal-content">
        <div class="status-modal-header">
            <h3 class="status-modal-title">Change Payment Status</h3>
            <button class="status-modal-close" onclick="closePaymentStatusModal()">&times;</button>
        </div>
        <div class="status-modal-body">
            <div class="form-group">
                <label for="paymentStatusSelect">Select Status:</label>
                <select class="status-select" id="paymentStatusSelect">
                    <option value="pending">Pending</option>
                    <option value="completed">Completed</option>
                    <option value="failed">Failed</option>
                    <option value="refunded">Refunded</option>
                </select>
            </div>
        </div>
        <div class="status-modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closePaymentStatusModal()">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="updatePaymentStatus()">Update</button>
        </div>
    </div>
</div>

<!-- Payment Edit Modal -->
<div class="status-modal" id="paymentEditModal" style="display: none;">
    <div class="status-modal-content">
        <div class="status-modal-header">
            <h3 class="status-modal-title">Edit Payment</h3>
            <button class="status-modal-close" onclick="closePaymentEditModal()">&times;</button>
        </div>
        <div class="status-modal-body" style="max-height: 500px; overflow-y: auto;">
            <form id="paymentEditForm">
                <input type="hidden" id="paymentEditId" name="paymentId">
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                    <div class="form-group">
                        <label for="paymentEditAmount">💰 Amount Paid:</label>
                        <input type="number" step="0.01" class="form-control" id="paymentEditAmount" name="amountPaid" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="paymentEditCurrency">💱 Currency:</label>
                        <select class="form-control" id="paymentEditCurrency" name="currency" required>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                            <option value="RUB">RUB</option>
                            <option value="UAH">UAH</option>
                        </select>
                    </div>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                    <div class="form-group">
                        <label for="paymentEditLessons">📚 Lessons Purchased:</label>
                        <input type="number" class="form-control" id="paymentEditLessons" name="lessonsPurchased" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="paymentEditTariff">⏱️ Tariff:</label>
                        <select class="form-control" id="paymentEditTariff" name="transactionType" required>
                            <option value="25min">25 minutes</option>
                            <option value="50min">50 minutes</option>
                            <option value="Donation">Donation</option>
                            <option value="Manual">Manual</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="paymentEditSystem">💳 Payment System:</label>
                    <select class="form-control" id="paymentEditSystem" name="paymentSystem" required>
                        <option value="PayPal">🅿️ PayPal</option>
                        <option value="Robokassa">🔒 Robokassa</option>
                        <option value="Betatransfer">🔄 Betatransfer</option>
                        <option value="Monobank">💙 Monobank</option>
                        <option value="Cryptocloud">🪙 Cryptocloud</option>
                        <option value="Payoneer">💼 Payoneer</option>
                        <option value="Manual Bank">🏦 Manual Bank</option>
                        <option value="Manual">✋ Manual</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="paymentEditStatus">📊 Status:</label>
                    <select class="form-control" id="paymentEditStatus" name="status" required>
                        <option value="pending">⏳ Pending</option>
                        <option value="completed">✅ Completed</option>
                        <option value="failed">❌ Failed</option>
                        <option value="refunded">↩️ Refunded</option>
                        <option value="manual_review">👀 Manual Review</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="paymentEditIdentifier">🆔 Client ID / Transaction ID:</label>
                    <input type="text" class="form-control" id="paymentEditIdentifier" name="pendingIdentifier" placeholder="Enter transaction or client ID">
                </div>
                
                <div class="form-group">
                    <label for="paymentEditDescription">📝 Description:</label>
                    <textarea class="form-control" id="paymentEditDescription" name="description" rows="3" placeholder="Add any relevant notes..."></textarea>
                </div>
            </form>
        </div>
        <div class="status-modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closePaymentEditModal()">Cancel</button>
            <button type="submit" form="paymentEditForm" class="btn btn-primary" id="savePaymentBtn">Save Changes</button>
        </div>
    </div>
</div>