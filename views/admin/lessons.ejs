<div class="container">
    <div class="page-header">
        <h1>Lesson Management</h1>
        <div class="page-actions">
            <a href="/api/lessons/export" class="btn btn-secondary"><i class="icon-export"></i> Export to CSV</a>
            <a href="/dashboard/lessons/add" class="btn btn-primary"><i class="icon-add"></i> Schedule Lesson</a>
        </div>
    </div>
    <div class="card filter-card">
        <form action="/dashboard/lessons" method="GET" class="filter-form">
            <div class="filter-group main-search">
                <label for="search-input">Search</label>
                <div class="input-with-icon">
                    <i class="icon-search"></i>
                    <input type="text" id="search-input" name="search" placeholder="By student, teacher, topic..." value="<%= query.search || '' %>">
                </div>
            </div>

            <button type="button" id="mobile-filter-toggle" class="btn btn-secondary mobile-only">
                <i class="icon-filter"></i>
                <span>Filters</span>
            </button>
            
            <div class="collapsible-filters">
                <div class="filter-group">
                    <label for="teacher">Teacher</label>
                    <select name="teacher" id="teacher">
                        <option value="">All Teachers</option>
                        <% teachers.forEach(t => { %>
                            <option value="<%= t._id %>" <%= (query.teacher == t._id) ? 'selected' : '' %>><%= t.name %></option>
                        <% }); %>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="student">Student</label>
                    <select name="student" id="student">
                        <option value="">All Students</option>
                        <% students.forEach(s => { %>
                            <option value="<%= s._id %>" <%= (query.student == s._id) ? 'selected' : '' %>><%= s.name %></option>
                        <% }); %>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="dateFrom">From</label>
                    <div class="input-with-icon">
                        <i class="icon-calendar"></i>
                        <input type="date" name="dateFrom" id="dateFrom" value="<%= query.dateFrom || '' %>">
                    </div>
                </div>
                <div class="filter-group">
                    <label for="dateTo">To</label>
                    <div class="input-with-icon">
                        <i class="icon-calendar"></i>
                        <input type="date" name="dateTo" id="dateTo" value="<%= query.dateTo || '' %>">
                    </div>
                </div>
                <div class="filter-actions">
                    <button type="submit" class="btn btn-primary">Apply</button>
                    <a href="/dashboard/lessons" class="btn btn-secondary">Clear</a>
                </div>
            </div>
        </form>
    </div>

    <div class="card">
        <h2>All Lessons List</h2>
        <% if (lessons && lessons.length > 0) { %>
            <div class="table-responsive">
                <table class="data-table">
                    <%
                        const sortableLink = (field, text) => {
                            const currentSort = query.sort === field;
                            const order = currentSort && query.order === 'asc' ? 'desc' : 'asc';
                            const icon = currentSort ? (query.order === 'asc' ? '▲' : '▼') : '';
                            const params = new URLSearchParams(query);
                            params.set('sort', field);
                            params.set('order', order);
                            return `<a href="?${params.toString()}">${text} ${icon}</a>`;
                        };
                    %>
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Teacher</th>
                            <th><%- sortableLink('topic', 'Course / Topic') %></th>
                            <th><%- sortableLink('lessonDate', 'Date & Time') %></th>
                            <th><%- sortableLink('status', 'Status') %></th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% lessons.forEach(lesson => { %>
                            <tr data-lesson-id="<%= lesson._id %>">
                                <td><%= lesson.student.name %></td>
                                <td><%= lesson.teacher.name %></td>
                                <td><%= lesson.course.name %></td>
                                <td><%= new Date(lesson.lessonDate).toLocaleString('en-GB') %></td>

                                <td class="status-cell" data-lesson-id="<%= lesson._id %>" data-current-status="<%= lesson.status %>">
                                    <span class="badge status-<%= lesson.status %> current-status-badge">
                                        <%= lesson.status.replace(/_/g, ' ') %>
                                    </span>
                                    <div class="status-dropdown">
                                        <div class="status-dropdown-item" data-status="scheduled">Scheduled</div>
                                        <div class="status-dropdown-item" data-status="completed">Completed</div>
                                        <div class="status-dropdown-item" data-status="cancelled_by_student">Cancelled (Student)</div>
                                        <div class="status-dropdown-item" data-status="cancelled_by_teacher">Cancelled (Teacher)</div>
                                        <div class="status-dropdown-item" data-status="no_show">No Show</div>
                                    </div>
                                </td>
                                
                                <td class="actions-cell">
                                    <a href="/dashboard/lessons/manage/<%= lesson._id %>" class="btn-icon" data-tooltip="Manage"><i class="icon-edit"></i></a>
                                    <button class="btn-icon btn-danger delete-lesson-btn" data-id="<%= lesson._id %>" data-tooltip="Delete">
                                        <i class="icon-delete"></i>
                                    </button>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <div class="empty-state">
                <div class="empty-state-icon"><i class="icon-inbox"></i></div>
                <h3>No Lessons Scheduled</h3>
                <p>The schedule is empty. Plan the first lesson to get started.</p>
                <a href="/dashboard/lessons/add" class="btn btn-primary"><i class="icon-add"></i> Schedule Lesson</a>
            </div>
        <% } %>
    </div>
</div>



<script>
document.addEventListener('DOMContentLoaded', () => {
    const modalOverlay = document.getElementById('lesson-modal-overlay');
    const modalContainer = document.getElementById('lesson-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalFormContent = document.getElementById('modal-form-content');
    const lessonForm = document.getElementById('lesson-form');
    const closeBtn = document.getElementById('modal-close-btn');
    const cancelBtn = document.getElementById('modal-cancel-btn');

    let formCache = {};
    let activeDropdown = null;

    const openModal = () => {
        document.body.classList.add('modal-open');
        modalFormContent.innerHTML = '<div class="spinner"></div>';
    };

    const closeModal = () => {
        document.body.classList.remove('modal-open');
    };

    const buildFormHtml = (data, lesson = {}) => {
        const toLocalISOString = (date) => {
            if (!date) return '';
            const d = new Date(date);
            const tzoffset = d.getTimezoneOffset() * 60000;
            return new Date(d - tzoffset).toISOString().slice(0, 16);
        };
        const lessonDate = lesson.lessonDate ? toLocalISOString(lesson.lessonDate) : '';
        const studentId = lesson.student ? String(lesson.student) : null;
        const teacherId = lesson.teacher ? String(lesson.teacher) : null;
        const courseId = lesson.course ? String(lesson.course) : null;
        return `
            <div class="form-group"><label for="student">Student</label><select id="student" name="student" required>${data.students.map(s => `<option value="${s._id}" ${studentId === String(s._id) ? 'selected' : ''}>${s.name} (Balance: ${s.lessonsPaid})</option>`).join('')}</select></div>
            <div class="form-group"><label for="teacher">Teacher</label><select id="teacher" name="teacher" required>${data.teachers.map(t => `<option value="${t._id}" ${teacherId === String(t._id) ? 'selected' : ''}>${t.name}</option>`).join('')}</select></div>
            <div class="form-group"><label for="course">Course</label><select id="course" name="course" required>${data.courses.map(c => `<option value="${c._id}" ${courseId === String(c._id) ? 'selected' : ''}>${c.name}</option>`).join('')}</select></div>
            <div class="form-group"><label for="topic">Specific Topic</label><input type="text" id="topic" name="topic" value="${lesson.topic || ''}"></div>
            <div class="form-group"><label for="lessonDate">Date and Time</label><input type="datetime-local" id="lessonDate" name="lessonDate" value="${lessonDate}" required></div>
            <div class="form-group"><label for="duration">Duration (minutes)</label><select id="duration" name="duration"><option value="25" ${lesson.duration == 25 ? 'selected' : ''}>25</option><option value="50" ${lesson.duration == 50 ? 'selected' : ''}>50</option><option value="80" ${lesson.duration == 80 ? 'selected' : ''}>80</option></select></div>
        `;
    };

    const populateForm = async (mode, lessonId = null) => {
        const isCreate = mode === 'create';
        modalTitle.textContent = isCreate ? 'Schedule New Lesson' : 'Edit Lesson';
        lessonForm.dataset.mode = mode;
        lessonForm.dataset.id = lessonId || '';
        openModal();

        try {
            if (!formCache.students) {
                const res = await fetch('/api/lessons/form-data');
                if (!res.ok) throw new Error('Failed to load form data.');
                formCache = await res.json();
            }

            let lessonData = {};
            if (!isCreate) {
                const lessonRes = await fetch(`/api/lessons/${lessonId}`);
                if (!lessonRes.ok) throw new Error('Failed to load lesson data.');
                lessonData = await lessonRes.json();
            }
            
            modalFormContent.innerHTML = buildFormHtml(formCache, lessonData);
        } catch(err) {
            modalFormContent.innerHTML = `<p style="color: red;">${err.message}</p>`;
        }
    };

    // === ЕДИНЫЙ ГЛОБАЛЬНЫЙ ОБРАБОТЧИК КЛИКОВ ===
    document.addEventListener('click', (e) => {
        const target = e.target;

        if (target.closest('a[href="/dashboard/lessons/add"]')) {
            e.preventDefault();
            populateForm('create');
            return;
        }

        const editBtn = target.closest('a[href*="/dashboard/lessons/manage/"]');
        if (editBtn) {
            e.preventDefault();
            const lessonId = editBtn.href.split('/').pop();
            populateForm('edit', lessonId);
            return;
        }

        if (target === modalOverlay || target === closeBtn || target === cancelBtn) {
            closeModal();
        }
    });
    
    // Отдельный обработчик для смены статуса, чтобы избежать путаницы
    document.addEventListener('click', (e) => {
        const dropdownItem = e.target.closest('.status-dropdown-item');
        if (!dropdownItem) return;

        const cell = dropdownItem.closest('.status-cell');
        const lessonId = cell.dataset.lessonId;
        const newStatus = dropdownItem.dataset.status;

        if (newStatus === cell.dataset.currentStatus) {
            cell.querySelector('.status-dropdown').classList.remove('show');
            cell.classList.remove('is-open');
            activeDropdown = null;
            return;
        }

        fetch(`/api/lessons/${lessonId}/status`, {
            method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ status: newStatus })
        })
        .then(res => {
            if (!res.ok) return res.json().then(err => { throw new Error(err.msg) });
            return res.json();
        })
        .then(data => {
            const { lesson } = data;
            const badge = cell.querySelector('.current-status-badge');
            badge.textContent = lesson.status.replace(/_/g, ' ');
            badge.className = `badge status-${lesson.status} current-status-badge`;
            cell.dataset.currentStatus = lesson.status;
            cell.querySelector('.status-dropdown').classList.remove('show');
            cell.classList.remove('is-open');
            activeDropdown = null;
        })
        .catch(err => alert(`Error: ${err.message}`));
    });

    // === Обработчики для самого модального окна ===
    [closeBtn, cancelBtn, modalOverlay].forEach(el => el.addEventListener('click', closeModal));

    lessonForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const data = Object.fromEntries(new FormData(lessonForm).entries());
        const { mode, id } = lessonForm.dataset;
        const url = mode === 'create' ? '/api/lessons' : `/api/lessons/${id}`;
        const method = mode === 'create' ? 'POST' : 'PUT';

        fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) })
            .then(res => {
                if (!res.ok) return res.json().then(err => { throw new Error(err.msg) });
                closeModal();
                location.reload();
            })
            .catch(err => alert(`Error: ${err.message}`));
    });
});
</script>