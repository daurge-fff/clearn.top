const express = require('express');
const router = express.Router();
const paymentManager = require('../services/payments/PaymentManager');
const { findUserByIdentifier, creditPaymentToUser } = require('../services/paymentService');
const { notifyAdmin } = require('../services/notificationService');
const Payment = require('../models/Payment');
const bot = require('../bot');
const { ensureAuth, ensureRole } = require('../middleware/auth');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ª—é–±—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
 * @route POST /api/payments/create
 */
router.post('/create', async (req, res) => {
    try {
        const { amount, currency, description, paymentSystem, identifier } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!paymentManager.validatePaymentData({ amount, currency, description, identifier, orderId: 'temp' })) {
            return res.status(400).json({ 
                error: 'Missing required fields: amount, currency, description, paymentSystem, identifier' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const provider = paymentManager.getProvider(paymentSystem);
        if (!provider) {
            return res.status(400).json({ 
                error: `Payment system '${paymentSystem}' is not available` 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∞–ª—é—Ç—ã
        const providerInfo = provider.getProviderInfo();
        if (!providerInfo.supportedCurrencies.includes(currency.toUpperCase())) {
            return res.status(400).json({ 
                error: `Currency '${currency}' is not supported by ${providerInfo.displayName}` 
            });
        }

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        const orderId = Date.now().toString();
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const pendingPayment = await createPendingPayment({
            amount,
            currency,
            description,
            identifier,
            paymentSystem,
            orderId
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await notifyAdmin(
            `üßæ *New Invoice Created*\n\n` +
            `üí∞ *Amount:* ${amount} ${currency}\n` +
            `üí≥ *System:* ${providerInfo.displayName}\n` +
            `üë§ *Client:* \`${identifier}\`\n` +
            `üìù *Description:* ${description}\n` +
            `üÜî *Order ID:* \`${orderId}\``
        );

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        const paymentResult = await paymentManager.createPayment(paymentSystem, {
            amount,
            currency,
            description,
            orderId,
            identifier
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ —Å –≤–Ω–µ—à–Ω–∏–º ID
        if (paymentResult.externalId) {
            pendingPayment.externalId = paymentResult.externalId;
            await pendingPayment.save();
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const response = {
            success: true,
            orderId,
            provider: providerInfo.displayName,
            isManual: providerInfo.isManual
        };

        if (paymentResult.paymentUrl) {
            response.paymentUrl = paymentResult.paymentUrl;
        }

        if (paymentResult.instructions) {
            response.instructions = paymentResult.instructions;
        }

        if (providerInfo.isManual) {
            response.manualInstructions = paymentManager.getPaymentInstructions(
                paymentSystem, 
                { amount, currency, orderId, identifier },
                'en' // TODO: –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            );
        }

        res.json(response);

    } catch (error) {
        console.error('[Payments] Error creating payment:', error);
        
        await notifyAdmin(
            `üî• *Invoice Creation Failed*\n\n` +
            `üí≥ *System:* ${req.body.paymentSystem}\n` +
            `üë§ *Client:* \`${req.body.identifier}\`\n` +
            `‚ùóÔ∏è *Error:* \`${error.message}\``
        );

        res.status(500).json({ 
            error: 'Failed to create payment invoice',
            details: error.message 
        });
    }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
 * @route GET /api/payments/providers
 */
router.get('/providers', (req, res) => {
    try {
        const { currency } = req.query;
        
        let providers;
        if (currency) {
            providers = paymentManager.getProvidersByCurrency(currency);
        } else {
            providers = paymentManager.getAvailableProviders();
        }

        res.json({
            success: true,
            providers: providers.map(provider => ({
                name: provider.name,
                displayName: provider.displayName,
                supportedCurrencies: provider.supportedCurrencies,
                isManual: provider.isManual,
                requiresManualConfirmation: provider.requiresManualConfirmation
            }))
        });
    } catch (error) {
        console.error('[Payments] Error getting providers:', error);
        res.status(500).json({ error: 'Failed to get payment providers' });
    }
});

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Robokassa Result URL
 * @route POST /api/payments/robokassa/result
 */
router.post('/robokassa/result', express.urlencoded({ extended: true }), async (req, res) => {
    try {
        const { OutSum, InvId, SignatureValue } = req.body;
        
        console.log('[Robokassa] Received result notification:', req.body);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        const result = await paymentManager.handleNotification('robokassa', req.body, req.headers);
        
        if (result.success && result.orderId) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const payment = await Payment.findOne({ 
                $or: [
                    { robokassaInvoiceId: result.orderId },
                    { externalId: result.orderId }
                ]
            });
            
            if (payment && payment.status !== 'completed') {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                payment.status = 'completed';
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
                if (!payment.userId) {
                    const user = await findUserByIdentifier(payment.pendingIdentifier);
                    if (user) {
                        payment.userId = user._id;
                        console.log(`Auto-linked Robokassa payment ${payment._id} to user ${user.email}`);
                    }
                }
                
                await payment.save();
                
                // –ù–∞—á–∏—Å–ª—è–µ–º —É—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if (payment.userId) {
                    await creditPaymentToUser(payment.userId, payment.amount, payment.currency);
                    
                    await notifyAdmin(
                        `‚úÖ *Successful Payment (Robokassa)*\n\n` +
                        `üí∞ *Amount:* ${payment.amount} ${payment.currency}\n` +
                        `üë§ *Client:* \`${payment.pendingIdentifier}\`\n` +
                        `üÜî *Order:* \`${result.orderId}\`\n` +
                        `‚úÖ *Status:* Payment processed and lessons credited`
                    );
                } else {
                    await notifyAdmin(
                        `‚ö†Ô∏è *Successful Payment (Robokassa) - Needs Linking*\n\n` +
                        `üí∞ *Amount:* ${payment.amount} ${payment.currency}\n` +
                        `üë§ *Client:* \`${payment.pendingIdentifier}\`\n` +
                        `üÜî *Order:* \`${result.orderId}\`\n\n` +
                        `Please link this payment to a user manually.`
                    );
                }
            }
        }
        
        res.send('OK');
        
    } catch (error) {
        console.error('[Robokassa] Result processing error:', error);
        res.status(500).send('ERROR');
    }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
 * @route POST /api/payments/webhook/:provider
 */
router.post('/webhook/:provider', express.raw({ type: 'application/json' }), async (req, res) => {
    try {
        const providerName = req.params.provider;
        const headers = req.headers;
        
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        let notificationData;
        if (req.headers['content-type']?.includes('application/json')) {
            notificationData = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
        } else {
            notificationData = req.body;
        }

        console.log(`[Payments] Received webhook from ${providerName}:`, notificationData);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        const result = await paymentManager.handleNotification(providerName, notificationData, headers);

        if (result.success && result.orderId) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const payment = await Payment.findOne({ 
                $or: [
                    { robokassaInvoiceId: result.orderId },
                    { externalId: result.orderId }
                ]
            });

            if (payment && payment.status !== 'completed') {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                payment.status = 'completed';
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
                if (!payment.userId) {
                    const user = await findUserByIdentifier(payment.pendingIdentifier);
                    if (user) {
                        payment.userId = user._id;
                        console.log(`Auto-linked ${providerName} payment ${payment._id} to user ${user.email}`);
                    }
                }

                await payment.save();

                // –ù–∞—á–∏—Å–ª—è–µ–º —É—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if (payment.userId) {
                    const creditResult = await creditPaymentToUser(payment);
                    if (creditResult.success) {
                        await notifyAdmin(
                            `‚úÖ *Successful Payment (${paymentManager.getProvider(providerName).getDisplayName()})*\n\n` +
                            `*Amount:* ${result.amount} ${result.currency || payment.currency}\n` +
                            `*Client:* \`${payment.pendingIdentifier}\`\n` +
                            `*User:* ${creditResult.user.name}\n` +
                            `*Action:* ${payment.lessonsPurchased} lesson(s) credited. New balance: *${creditResult.user.lessonsPaid}* lessons.`
                        );
                    }
                } else {
                    await notifyAdmin(
                        `‚ö†Ô∏è *Successful Payment (${paymentManager.getProvider(providerName).getDisplayName()}) - Needs Linking*\n\n` +
                        `*Amount:* ${result.amount} ${result.currency || payment.currency}\n` +
                        `*Client:* \`${payment.pendingIdentifier}\`\n` +
                        `*Order:* \`${result.orderId}\`\n\n` +
                        `Please link this payment to a user manually.`
                    );
                }
            }
        }

        res.sendStatus(200);

    } catch (error) {
        console.error(`[Payments] Webhook error for ${req.params.provider}:`, error);
        res.status(500).send('Internal Server Error');
    }
});

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 * @route POST /api/payments/manual-confirm
 */
router.post('/manual-confirm', async (req, res) => {
    try {
        const { orderId, transactionId, paymentSystem, amount, currency, identifier } = req.body;

        if (!orderId || !transactionId || !paymentSystem || !amount || !identifier) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if (!paymentManager.isManualProvider(paymentSystem)) {
            return res.status(400).json({ error: 'This payment system does not support manual confirmation' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const existingPayment = await Payment.findOne({
            $or: [
                { robokassaInvoiceId: orderId },
                { externalId: orderId }
            ]
        });

        if (!existingPayment) {
            return res.status(404).json({ error: 'Payment not found' });
        }

        if (existingPayment.status !== 'pending') {
            return res.status(400).json({ error: 'Payment is not in pending status' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Transaction ID –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ
        const duplicatePayment = await Payment.findOne({
            paypalOrderID: transactionId,
            _id: { $ne: existingPayment._id }
        });

        if (duplicatePayment) {
            return res.status(400).json({ error: 'This Transaction ID has already been used' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
        existingPayment.status = 'manual_review';
        existingPayment.paypalOrderID = transactionId;
        existingPayment.paymentSystem = `${paymentSystem} (Manual)`;
        await existingPayment.save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        const provider = paymentManager.getProvider(paymentSystem);
        const providerName = provider ? provider.getDisplayName() : paymentSystem;

        try {
            await bot.telegram.sendMessage(process.env.TELEGRAM_CHAT_ID,
                `‚ö†Ô∏è *Manual ${providerName} Confirmation*\n\n` +
                `A user claims to have paid. Please verify this transaction in your ${providerName} account.\n\n` +
                `üí∞ *Amount:* ${amount} ${currency}\n` +
                `üë§ *Client:* \`${identifier}\`\n` +
                `üßæ *Transaction Ref:* \`${transactionId}\`\n` +
                `üÜî *Order ID:* \`${orderId}\``,
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: "‚úÖ Approve", callback_data: `payment_approve_${existingPayment._id}` },
                                { text: "‚ùå Decline", callback_data: `payment_decline_${existingPayment._id}` }
                            ]
                        ]
                    }
                }
            );
        } catch (telegramError) {
            console.error('Failed to send manual payment notification to admin:', telegramError.message);
        }

        res.json({
            success: true,
            message: 'Your payment confirmation has been received and is awaiting review.',
            orderId,
            status: 'manual_review'
        });

    } catch (error) {
        console.error('[Payments] Error confirming manual payment:', error);
        
        await notifyAdmin(
            `üî• *Error on Manual Payment Confirmation*\n\n` +
            `*System:* ${req.body.paymentSystem}\n` +
            `*Order ID:* \`${req.body.orderId}\`\n` +
            `*Transaction ID:* \`${req.body.transactionId}\`\n` +
            `*Error:* ${error.message}`
        );

        res.status(500).json({ 
            error: 'Server error while submitting your confirmation',
            details: error.message 
        });
    }
});

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function createPendingPayment(details) {
    const { amount, currency, description, identifier, paymentSystem, orderId } = details;
    const user = await findUserByIdentifier(identifier);
    
    let lessonsPurchased = 0;
    if (description && !description.toLowerCase().includes('donation')) {
        const match = description.match(/x(\d+)/);
        lessonsPurchased = (match && match[1]) ? parseInt(match[1], 10) : 1;
    }
    
    const pricePerLesson = lessonsPurchased > 0 ? (parseFloat(amount) / lessonsPurchased) : 0;
    
    return await Payment.create({
        userId: user ? user._id : null,
        pendingIdentifier: identifier.trim().toLowerCase(),
        robokassaInvoiceId: orderId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        status: 'pending',
        amountPaid: amount,
        baseAmount: amount,
        currency: currency || 'EUR',
        lessonsPurchased: lessonsPurchased,
        pricePerLesson: pricePerLesson,
        paymentSystem: paymentSystem,
        transactionType: description.toLowerCase().includes('donation') ? 'Donation' : '50min'
    });
}

module.exports = router;